//
// AuthAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AuthAPI {
    /**
     Login
     
     - parameter deviceId: (form) Unique ID of the device 
     - parameter deviceType: (form) Type of the device &#x60;APPLE&#x60; or &#x60;ANDROID&#x60; 
     - parameter email: (form) Email 
     - parameter password: (form) Password 
     - parameter devicePushToken: (form) Unique push token for the device (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func loginPost(deviceId: String, deviceType: String, email: String, password: String, devicePushToken: String? = nil, completion: @escaping ((_ data: UserResponse?,_ error: Error?) -> Void)) {
        loginPostWithRequestBuilder(deviceId: deviceId, deviceType: deviceType, email: email, password: password, devicePushToken: devicePushToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Login
     - POST /login
     - 
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "result" : true,
  "payload" : "{}",
  "message" : "message"
}}]
     
     - parameter deviceId: (form) Unique ID of the device 
     - parameter deviceType: (form) Type of the device &#x60;APPLE&#x60; or &#x60;ANDROID&#x60; 
     - parameter email: (form) Email 
     - parameter password: (form) Password 
     - parameter devicePushToken: (form) Unique push token for the device (optional)

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func loginPostWithRequestBuilder(deviceId: String, deviceType: String, email: String, password: String, devicePushToken: String? = nil) -> RequestBuilder<UserResponse> {
        let path = "/login"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "device_id": deviceId,
            "device_type": deviceType,
            "device_push_token": devicePushToken,
            "email": email,
            "password": password
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Logout
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logoutGet(completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        logoutGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Logout
     - GET /logout
     - Logout the user from current device
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "result" : true,
  "payload" : "{}",
  "message" : "message"
}}]

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func logoutGetWithRequestBuilder() -> RequestBuilder<SuccessResponse> {
        let path = "/logout"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update Password
     
     - parameter password: (form) Password 
     - parameter currentPassword: (form) Current password 
     - parameter passwordConfirmation: (form) Password confirmation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func passwordEditPost(password: String, currentPassword: String, passwordConfirmation: String, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        passwordEditPostWithRequestBuilder(password: password, currentPassword: currentPassword, passwordConfirmation: passwordConfirmation).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Password
     - POST /password/edit
     - 
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "result" : true,
  "payload" : "{}",
  "message" : "message"
}}]
     
     - parameter password: (form) Password 
     - parameter currentPassword: (form) Current password 
     - parameter passwordConfirmation: (form) Password confirmation 

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func passwordEditPostWithRequestBuilder(password: String, currentPassword: String, passwordConfirmation: String) -> RequestBuilder<SuccessResponse> {
        let path = "/password/edit"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "password": password,
            "current_password": currentPassword,
            "password_confirmation": passwordConfirmation
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Register
     
     - parameter deviceId: (form) Unique ID of the device 
     - parameter deviceType: (form) Type of the device &#x60;APPLE&#x60; or &#x60;ANDROID&#x60; 
     - parameter email: (form) Email 
     - parameter password: (form) Password. Must be at least 6 characters. 
     - parameter passwordConfirmation: (form) Password confirmation 
     - parameter devicePushToken: (form) Unique push token for the device (optional)
     - parameter firstName: (form) First name (optional)
     - parameter lastName: (form) Last name (optional)
     - parameter phone: (form) Phone (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerPost(deviceId: String, deviceType: String, email: String, password: String, passwordConfirmation: String, devicePushToken: String? = nil, firstName: String? = nil, lastName: String? = nil, phone: String? = nil, completion: @escaping ((_ data: UserResponse?,_ error: Error?) -> Void)) {
        registerPostWithRequestBuilder(deviceId: deviceId, deviceType: deviceType, email: email, password: password, passwordConfirmation: passwordConfirmation, devicePushToken: devicePushToken, firstName: firstName, lastName: lastName, phone: phone).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Register
     - POST /register
     - 
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "result" : true,
  "payload" : "{}",
  "message" : "message"
}}]
     
     - parameter deviceId: (form) Unique ID of the device 
     - parameter deviceType: (form) Type of the device &#x60;APPLE&#x60; or &#x60;ANDROID&#x60; 
     - parameter email: (form) Email 
     - parameter password: (form) Password. Must be at least 6 characters. 
     - parameter passwordConfirmation: (form) Password confirmation 
     - parameter devicePushToken: (form) Unique push token for the device (optional)
     - parameter firstName: (form) First name (optional)
     - parameter lastName: (form) Last name (optional)
     - parameter phone: (form) Phone (optional)

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func registerPostWithRequestBuilder(deviceId: String, deviceType: String, email: String, password: String, passwordConfirmation: String, devicePushToken: String? = nil, firstName: String? = nil, lastName: String? = nil, phone: String? = nil) -> RequestBuilder<UserResponse> {
        let path = "/register"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "device_id": deviceId,
            "device_type": deviceType,
            "device_push_token": devicePushToken,
            "first_name": firstName,
            "last_name": lastName,
            "phone": phone,
            "email": email,
            "password": password,
            "password_confirmation": passwordConfirmation
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
